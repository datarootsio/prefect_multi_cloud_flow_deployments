name: Terraform Infrastructure Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
defaults:
  run:
    working-directory: infra/
env:
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS_KEY}}
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ vars.GAR_LOCATION }}
  GAR_REPO_ID: ${{ vars.GAR_REPO_ID }}
  IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
  REGION: ${{ vars.GCP_REGION }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
  ACR_REGISTRY_URL: ${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
  ACR_USERNAME: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
  ACR_PASSWORD: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

jobs:
  build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
    steps:
      - uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: $TERRAFORM_VERSION
      - name: Setup terraform variables
        id: vars
        run: |
          cat > pipeline.auto.tfvars <<EOF
          prefect_account_id="${{ secrets.PREFECT_ACCOUNT_ID }}" 
          prefect_workspace_id="${{ secrets.PREFECT_WORKSPACE_ID }}" 
          prefect_api_key="${{ secrets.PREFECT_API_KEY }}"
          aws_access_key="${{ secrets.AWS_ACCESS_KEY }}"
          aws_secret_key="${{ secrets.AWS_SECRET_KEY }}"
          azurerm_client_id="${{ secrets.AZURE_AD_CLIENT_ID }}"
          azurerm_client_secret="${{ secrets.AZURE_AD_CLIENT_SECRET }}"
          azurerm_subscription_id="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          azurerm_tenant_id="${{ secrets.AZURE_AD_TENANT_ID }}"
          EOF
      - name: Check formatting of Terraform code
        id: fmt
        run: |
          terraform fmt
      - name: Terraform Init
        id: init
        run: |
          terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
  release:
    if: github.event_name == 'workflow_dispatch'
    #if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      max-parallel: 4
    steps:
      - uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_version: $TERRAFORM_VERSION
      - name: Setup terraform variables
        id: vars
        run: |
          cat > pipeline.auto.tfvars <<EOF
          prefect_account_id="${{ secrets.PREFECT_ACCOUNT_ID }}" 
          prefect_workspace_id="${{ secrets.PREFECT_WORKSPACE_ID }}" 
          prefect_api_key="${{ secrets.PREFECT_API_KEY }}"
          aws_access_key="${{ secrets.AWS_ACCESS_KEY }}"
          aws_secret_key="${{ secrets.AWS_SECRET_KEY }}"
          azurerm_client_id="${{ secrets.AZURE_AD_CLIENT_ID }}"
          azurerm_client_secret="${{ secrets.AZURE_AD_CLIENT_SECRET }}"
          azurerm_subscription_id="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          azurerm_tenant_id="${{ secrets.AZURE_AD_TENANT_ID }}"
          EOF
      - name: Check formatting of Terraform code
        id: fmt
        run: |
          terraform fmt
      - name: Terraform Init
        id: init
        run: |
          terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        id: apply
        run: terraform apply -no-color -input=false --auto-approve
        continue-on-error: true
      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: exit 1
  deploy:
    if: github.event_name == 'workflow_dispatch'
    needs: release
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ env.GOOGLE_CREDENTIALS }}'

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: "Use gcloud CLI"
        run: "gcloud info"

      - name: "Docker auth"
        run: |-
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build and Push Container
        run: |-
          docker build -t ${{ env.IMAGE_NAME }}:latest ./

          docker tag "${{ env.IMAGE_NAME }}:latest" "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO_ID }}/${{ env.IMAGE_NAME }}:latest"

          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO_ID }}/${{ env.IMAGE_NAME }}:latest"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and Push Docker Image to Amazon ECR
        run: |
          # Tag Docker image
          docker tag "${{ env.IMAGE_NAME }}:latest" "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:latest"

          # Push Docker image to Amazon ECR
          docker push "${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:latest"
     
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
    
      - name: Login to Azure ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
     
      - name: Tag and Push Docker Image to Azure ECR
        run: |
          # Tag Docker image
          docker tag "${{ env.IMAGE_NAME }}:latest" "${{ env.ACR_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest"

          # Push Docker image to Amazon ECR
          docker push "${{ env.ACR_REGISTRY_URL }}/${{ env.IMAGE_NAME }}:latest"     